
This is ubf-jsonrpc, a framework for integrating UBF and JSON-RPC.
This repository depends on the ubf and erlang-rfc4627 open source
repositories.


To build
========

1. Get and install an erlang system
   http://www.erlang.org

2. Get and install ubf
   http://github.com/norton/ubf

3. Get and install erlang-rfc4627
   http://www.lshift.net/blog/2007/02/17/json-and-json-rpc-for-erlang
   
4. Change to the src directory and type make
   $ cd src
   $ make

4. Run the unit test
   $ make check


**NOTE**

Before make, edit "src/Makefile" to change the "MY_UBF_EBIN" variable
to point to where the ebin directory that contains ubf's .beam files
and the "MY_UBF_INCLUDE" variable to point to where the include
directory that contains ubf's .hrl files.  Repeat the same steps for
erlang-rfc4627.  Then run "make".
   
   
Documentation -- Where should I start?
======================================

This README is a good first step.  Check out and build using the "To
build" instructions above.

Eunit tests can be found in the Unit-EUnit-Files directory.  These
tests illustrate an inets-based httpd module that uses UBF's contract
manager for checking JSON-RPC requests and responses.


What is UBF?
============

UBF is the "Universal Binary Format", designed and implemented by Joe
Armstrong.  See http://www.sics.se/~joe/ubf.html for full details.  A
really short summary:

   * UBF(A) is a protocol above a stream transport (e.g. TCP/IP), for
     encoding structured dataroughly equivalent to well-formed XML.

   * UBF(B) is a programming langauge for describing types in UBF(A)
     and protocols between clients and servers. UBF(B) is roughly
     equivalent to to Verified XML, XML-schemas, SOAP and WDSL.

     
What is JSON-RPC?
=================

JSON-RPC is a remote procedure call protocol encoded in JSON.  See
http://json-rpc.org/ for full details.


Credits
=======

Many, many thanks to Joe Armstrong, UBF's designer and original
implementor.

Thanks to LShift, erlang-rfc4627's designer and implementor.
UBF-JSONRPC relies on the erlang-rfc4627 application for encoding and
decoding JSON in erlang.

Gemini Mobile Technologies, Inc. has approved the release of this
repository under an MIT license.
